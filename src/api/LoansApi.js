/**
 * Third Party Loan API
 * Through this API you can can retrieve loan data
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoanModel from '../model/LoanModel';
import LoanRepaymentModel from '../model/LoanRepaymentModel';
import LoansModel from '../model/LoansModel';
import ProblemDetails from '../model/ProblemDetails';

/**
* Loans service.
* @module api/LoansApi
* @version v1.0
*/
export default class LoansApi {

    /**
    * Constructs a new LoansApi. 
    * @alias module:api/LoansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all loans associated with your Customer ID
     * Sample request:                    GET Loans/1cd09db1-e6d2-4d64-aeba-9e64b818461a/loans
     * @param {String} customerId Customer ID (a string)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LoansModel>} and HTTP response
     */
    getAllLoansWithHttpInfo(customerId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getAllLoans");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [LoansModel];
      return this.apiClient.callApi(
        '/Loans/{customerId}/loans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all loans associated with your Customer ID
     * Sample request:                    GET Loans/1cd09db1-e6d2-4d64-aeba-9e64b818461a/loans
     * @param {String} customerId Customer ID (a string)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LoansModel>}
     */
    getAllLoans(customerId, opts) {
      return this.getAllLoansWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific loan by its Loan ID
     * Sample request:                    GET Loans/71abf3e6-d6a8-45d2-8394-55cc32260bee
     * @param {String} loanId Loan ID (a string)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LoanModel>} and HTTP response
     */
    getLoanWithHttpInfo(loanId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loanId' is set
      if (loanId === undefined || loanId === null) {
        throw new Error("Missing the required parameter 'loanId' when calling getLoan");
      }

      let pathParams = {
        'loanId': loanId
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [LoanModel];
      return this.apiClient.callApi(
        '/Loans/{loanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a specific loan by its Loan ID
     * Sample request:                    GET Loans/71abf3e6-d6a8-45d2-8394-55cc32260bee
     * @param {String} loanId Loan ID (a string)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LoanModel>}
     */
    getLoan(loanId, opts) {
      return this.getLoanWithHttpInfo(loanId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the repayment information associated with a given loan's Loan ID
     * Sample request:                    GET /Loans/71abf3e6-d6a8-45d2-8394-55cc32260bee/repayments
     * @param {String} loanId Loan ID (a string)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoanRepaymentModel} and HTTP response
     */
    getRepaymentsWithHttpInfo(loanId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loanId' is set
      if (loanId === undefined || loanId === null) {
        throw new Error("Missing the required parameter 'loanId' when calling getRepayments");
      }

      let pathParams = {
        'loanId': loanId
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = LoanRepaymentModel;
      return this.apiClient.callApi(
        '/Loans/{loanId}/repayments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the repayment information associated with a given loan's Loan ID
     * Sample request:                    GET /Loans/71abf3e6-d6a8-45d2-8394-55cc32260bee/repayments
     * @param {String} loanId Loan ID (a string)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoanRepaymentModel}
     */
    getRepayments(loanId, opts) {
      return this.getRepaymentsWithHttpInfo(loanId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
